#pragma kernel EraseMask
#pragma kernel EraseLayer
#pragma kernel FindIsolatedPoint
#pragma kernel AppendIsolatedPoint
#pragma kernel BlurredEraseEdge
#pragma kernel RawIDMask
// input
uint3 _TerrainParams;
#define _LayerCount _TerrainParams.x // 当前地形层的索引
#define _Resolution _TerrainParams.y // 地形Blend贴图的分辨率
#define _LayerIndex _TerrainParams.z // 地形Blend贴图的分辨率

Texture2D<float4> _EraseMask;        // R: 多层区域的Mask; G: 两层以上区域的Mask; B: 孤立点Mask
Texture2D<float> _AlphaTexture;
Texture2D<float> _AlphaNormalize;
Texture2DArray<float> _AlphaTextureArray;
Texture2DArray<float4> _RawIDMaskArray;
// result
RWTexture2D<float4> EraseMaskResult;
RWTexture2D<float> AlphaTextureResult;
RWTexture2D<float> AlphaNormalizeResult;
RWTexture2DArray<float> AlphaTextureArrayResult;
RWTexture2DArray<float4> RawIDMaskArrayResult;

static const int2 _Offset[8] = 
{
    int2(-1, 1),  int2(0, 1),  int2(1, 1),
    int2(-1, 0),               int2(1, 0),
    int2(-1, -1), int2(0, -1), int2(1, -1), 
};
static const int2 _CrossOffset[4] = 
{
    int2(0, 1), int2(-1, 0), int2(1, 0), int2(0, -1),
};
uint2 GetNearID(uint2 id, uint index)
{
    return clamp(id + _Offset[index], 0, _Resolution);
}
uint2 GetNeraID(uint2 id, int2 offset)
{
    return clamp(id + offset, 0, _Resolution);
}
uint2 GetCrossID(uint2 id, uint index)
{
    return clamp(id + _CrossOffset[index], 0, _Resolution);
}

[numthreads(8, 8, 1)]
void EraseMask (uint3 id : SV_DispatchThreadID)
{
    uint validLayerCount = 0;
    for (uint i = 0; i < _LayerCount; i++)
    {
        uint3 texID = uint3(id.xy, i);
        if (_RawIDMaskArray[texID].r == 1)
            validLayerCount ++;
    }
    float resultR = validLayerCount > 3 ? 1 : 0;
    float resultG = validLayerCount == 3 ? 1 : 0;
    EraseMaskResult[id.xy] = float4(resultR, resultG, 0, 1);
}

[numthreads(8, 8, 1)]
void EraseLayer (uint3 id : SV_DispatchThreadID)
{
    if (_EraseMask[id.xy].r == 0)
    {
        for (uint j = 0; j < _LayerCount; j++)
        {
            uint3 texID = uint3(id.xy, j);
            RawIDMaskArrayResult[texID] = _RawIDMaskArray[texID];
        }
    }
    else
    {
        uint3 retainIds = 0;
        uint3 texID = 0;
        float3 alphas = 0;
        // 按照Alpha值的大小进行排序
        for (uint k = 0; k < _LayerCount; k++)
        {
            texID = uint3(id.xy, k);
            float4 rawIDMask = _RawIDMaskArray[texID];
            if (rawIDMask.x == 0) continue;
            if (rawIDMask.y > alphas.x)
            {
                alphas = float3(rawIDMask.y, alphas.xy);
                retainIds = uint3(k, retainIds.xy);
            }
            else if (rawIDMask.y > alphas.y)
            {
                alphas.yz = float2(rawIDMask.y, alphas.y);
                retainIds.yz = uint2(k, retainIds.y);
            }
            else if (rawIDMask.y > alphas.z)
            {
                alphas.z = rawIDMask.y;
                retainIds.z = k;
            }
            else continue;
        }
        float alphaSum = dot(1, alphas);
        for (uint m = 0; m < _LayerCount; m++)
        {
            texID = uint3(id.xy, m);
            float4 rawIDMask = _RawIDMaskArray[texID];
            if (retainIds.x == m)
                RawIDMaskArrayResult[texID] = float4(1, alphas.x, 0, 1);
            else if (retainIds.y == m)
                RawIDMaskArrayResult[texID] = float4(1, alphas.y, 0, 1);
            else if (retainIds.z == m)
                RawIDMaskArrayResult[texID] = float4(1, alphas.z, 0, 1);
            else
                RawIDMaskArrayResult[texID] = float4(rawIDMask.r, 0, 1, 1);
        }
    }
}

// 寻找和移除孤立点
[numthreads(8, 8, 1)]
void FindIsolatedPoint (uint3 id : SV_DispatchThreadID)
{
    float centerAlpha = _AlphaTexture[id.xy];
    float4 eraseMask = _EraseMask[id.xy];  // rg: 多层结构的Mask; b: 吸附孤立点后剩下的Mask(继承就行)
    if (eraseMask.r == 1 && centerAlpha > 0)
    {
        int zeroAlphaCount = 0;
        for (int i = 0; i < 4; i++)
        {
            if (_AlphaTexture[GetCrossID(id.xy, i)] == 0)
                zeroAlphaCount ++;
        }
        if (zeroAlphaCount == 4)
        {
            centerAlpha = 0;
            eraseMask.b = 1;
        }
    }
    EraseMaskResult[id.xy] = eraseMask;
    AlphaTextureResult[id.xy] = centerAlpha;
}
// 附着孤立点
[numthreads(8, 8, 1)]
void AppendIsolatedPoint (uint3 id : SV_DispatchThreadID)
{
    uint3 texID = uint3(id.xy, _LayerIndex);
    float centerAlpha = _AlphaTextureArray[texID];
    float4 isolatedMask = _EraseMask[id.xy]; // rg: 多层结构的Mask; b: 上一层的孤立点Mask
    if (isolatedMask.b == 1 && centerAlpha == 0)
    {
        int alphaCount = 0;
        for (int i = 0; i < 4; i++)
        {
            uint3 nearTexID = uint3(GetCrossID(id.xy, i), _LayerIndex);
            if (_AlphaTextureArray[nearTexID] > 0)
                alphaCount ++;
        }
        if (alphaCount > 1)
        {
            centerAlpha = _AlphaTexture[id.xy];
            isolatedMask.b = 0;
        }
    }
    EraseMaskResult[id.xy] = isolatedMask;
    AlphaTextureResult[id.xy] = centerAlpha;
}

// 虚化擦除后产生的不连续过渡 _RawIDMaskArray RawIDMaskArrayResult
[numthreads(8, 8, 1)]
void BlurredEraseEdge (uint3 id : SV_DispatchThreadID)
{
    float alphaSum = 0;
    for (uint i = 0; i < _LayerCount; i++)
    {
        uint3 texID = uint3(id.xy, i);
        float4 rawIDMask = _RawIDMaskArray[texID];
        if (rawIDMask.b == 1)
            rawIDMask.r = 0;
        if (rawIDMask.b == 0 && rawIDMask.r == 1)
        {
            for (uint j = 0; j < 8; j++)
            {
                uint3 nearTexID = uint3(GetNearID(id.xy, j), i);
                float4 nearRawIDMask = _RawIDMaskArray[nearTexID];
                if (nearRawIDMask.b == 1)
                {
                    rawIDMask.g = 0;
                    rawIDMask.a = 0;
                    break;
                }
            }
        }
        alphaSum += rawIDMask.g;
        RawIDMaskArrayResult[texID] = rawIDMask;
        AlphaTextureArrayResult[texID] = rawIDMask.g;
    }
    AlphaNormalizeResult[id.xy] = alphaSum;
}
// 输出RawIDMask
[numthreads(8, 8, 1)]
void RawIDMask (uint3 id : SV_DispatchThreadID)
{
    float centerAlpha = _AlphaTexture[id.xy];
    bool signID = centerAlpha > 0;
    if (!signID)
    {
        for (uint i = 0; i < 8; i++)
        {
            float nearAlpha = _AlphaTexture[GetNearID(id.xy, i)];
            if (!signID && nearAlpha > 0)
                signID = true;
        }
    }
    EraseMaskResult[id.xy] = float4(signID ? 1 : 0, centerAlpha, 0, 1);
}